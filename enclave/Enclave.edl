
// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;
    from "sgx_file.edl" import *;
    include "sgx_report.h"
    include "sgx_eid.h"
    from "attestation/attestation.edl" import *;

    trusted {
        /* define ECALLs here. */	

	public void test_enclave_init();		

	public uint32_t test_sc_encrypt_unencrypt();

        public uint32_t session_request(sgx_enclave_id_t src_enclave_id,
	[out, size=1500] uint8_t* dh_msg1);
	//, [out] size_t* session_ptr);

        public uint32_t proc_msg1([in, size=msg1_len] const uint8_t* msg1_str, size_t msg1_len,		
	[out, size=1700] uint8_t* dh_msg2);

	public uint32_t exchange_report(sgx_enclave_id_t src_enclave_id,
	       [in, size=msg2_len] const uint8_t* msg2_str, size_t msg2_len,	 
	       [out, size=1500] uint8_t *dh_msg3);
	       //,
	       //	       [user_check]size_t* session_ptr
	       //	       );

        public uint32_t proc_msg3([in, size=msg3_len] const uint8_t* msg3_str, size_t msg3_len,
	       [out, size=592] uint8_t* sealed_log);

	public uint32_t test_create_session();

	public uint32_t test_close_session();

        public sgx_status_t create_sealed_random_bytes32([out, size=sealed_log_size]
            uint8_t* sealed_log, uint32_t sealed_log_size );

        public sgx_status_t verify_sealed_bytes32([in, size=sealed_log_size]
            uint8_t* sealed_log, uint32_t sealed_log_size);

	public sgx_status_t set_ec_key([in, size=sealed_log_size]
            uint8_t* sealed_log, uint32_t sealed_log_size);

        public sgx_status_t say_something([in, size=len] const uint8_t* some_string, size_t len);

        public sgx_status_t get_self_report([out]sgx_report_t* p_report);
	
        public sgx_status_t calc_sha256([in, size=len] const uint8_t* input_str,
                                        size_t len,
                                        [out] uint8_t hash[32]);

        public sgx_status_t create_sealed_random_fe([out, size=sealed_log_size]
            uint8_t* sealed_log, uint32_t sealed_log_size );

        public sgx_status_t verify_sealed_fe([in, size=sealed_log_size]
            uint8_t* sealed_log, uint32_t sealed_log_size);

        public sgx_status_t sk_tweak_add_assign([in, size=sealed_log1_size]
            uint8_t* sealed_log1, uint32_t sealed_log1_size,
	    [in, size=sealed_log2_size]
            uint8_t* sealed_log2, uint32_t sealed_log2_size);

 	public sgx_status_t sk_tweak_mul_assign([in, size=sealed_log1_size]
            uint8_t* sealed_log1, uint32_t sealed_log1_size,
	    [in, size=sealed_log2_size]
            uint8_t* sealed_log2, uint32_t sealed_log2_size);

        public sgx_status_t sign([in] uint8_t some_message[32], [in, size=8192] uint8_t* sealed_log,[out] uint8_t sig[64]);

        public sgx_status_t get_public_key([in, size=8192] uint8_t* sealed_log,[out] uint8_t public_key[33]);


        public sgx_status_t first_message([in, size=8192] uint8_t* sealed_log_in,
		       	    		  [out, size=8192] uint8_t* sealed_log_out,
				          [out, size=256] uint8_t* plain_out);

        public sgx_status_t first_message_transfer([in, size=8192] uint8_t* sealed_log_in,
		       	    		  [out, size=8192] uint8_t* sealed_log_out,
				          [out, size=256] uint8_t* plain_out);

        public sgx_status_t second_message([in, size=8192] uint8_t* sealed_log_in,
		       	    		  [out, size=8192] uint8_t* sealed_log_out,
					  [in, size=len] const uint8_t* msg2_str, size_t len,
					  [out, size=480000] uint8_t* plain_out);

	public sgx_status_t sign_first([in, size=8192] uint8_t* sealed_log_in,
		       	  [out, size=8192] uint8_t* sealed_log_out,
			  [in, size=len] const uint8_t* sign_msg1,
			  size_t len,
			  [out, size=480000] uint8_t* plain_out);

	public sgx_status_t sign_second([in, size=8192] uint8_t* sealed_log_in,
		       	  [out, size=8192] uint8_t* sealed_log_out,
			  [in, size=len] const uint8_t* sign_msg2,
			  size_t len,	     
			  [out, size=480000] uint8_t* plain_out);

	public sgx_status_t keyupdate_first([in, size=8192] uint8_t* sealed_log_in,
		       	  [out, size=8192] uint8_t* sealed_log_out,
			  [in, size=len] const uint8_t* receiver_msg,
			  size_t len,
			  [out, size=8192] uint8_t* plain_out);

	};
};


