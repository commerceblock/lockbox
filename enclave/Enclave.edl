// Licensed to the Apache Software Foundation (ASF) under one
// or more contributor license agreements.  See the NOTICE file
// distributed with this work for additional information
// regarding copyright ownership.  The ASF licenses this file
// to you under the Apache License, Version 2.0 (the
// "License"); you may not use this file except in compliance
// with the License.  You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing,
// software distributed under the License is distributed on an
// "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
// KIND, either express or implied.  See the License for the
// specific language governing permissions and limitations
// under the License.

enclave {
    from "sgx_tstd.edl" import *;
    from "sgx_stdio.edl" import *;
    from "sgx_backtrace.edl" import *;
    from "sgx_tstdc.edl" import *;
    trusted {
        /* define ECALLs here. */
        public sgx_status_t create_sealed_secret_key([out, size=sealed_log_size]
            uint8_t* sealed_log, uint32_t sealed_log_size );

        public sgx_status_t verify_sealed_secret_key([in, size=sealed_log_size]
            uint8_t* sealed_log, uint32_t sealed_log_size);

        public sgx_status_t say_something([in, size=len] const uint8_t* some_string, size_t len);

        public sgx_status_t calc_sha256([in, size=len] const uint8_t* input_str,
                                        size_t len,
                                        [out] uint8_t hash[32]);


        public sgx_status_t sk_tweak_add_assign([in, size=sealed_log1_size]
            uint8_t* sealed_log1, uint32_t sealed_log1_size,
	    [in, size=sealed_log2_size]
            uint8_t* sealed_log2, uint32_t sealed_log2_size);

        public sgx_status_t sk_tweak_mul_assign([in, size=sealed_log1_size]
            uint8_t* sealed_log1, uint32_t sealed_log1_size,
	    [in, size=sealed_log2_size]
            uint8_t* sealed_log2, uint32_t sealed_log2_size);

        public sgx_status_t sign([in] uint8_t some_message[32], [in, size=1024] uint8_t* sealed_log,[out] uint8_t sig[64]);

        public sgx_status_t get_public_key([in, size=1024] uint8_t* sealed_log,[out] uint8_t public_key[33]);


        public sgx_status_t first_message([in, size=1024] uint8_t* sealed_log_in,
		       	    		  [out, size=2048] uint8_t* sealed_log_out,
				          [out, size=128] uint8_t* plain_out);

        public sgx_status_t second_message([in, size=1024] uint8_t* sealed_log_in,
		       	    		  [out, size=2048] uint8_t* sealed_log_out,
					  [in, size=len] const uint8_t* msg2_str, size_t len);

	      };
};


